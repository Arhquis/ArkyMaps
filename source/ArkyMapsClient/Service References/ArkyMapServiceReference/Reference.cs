//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArkyMapsClient.ArkyMapServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ArkyMapService", ConfigurationName="ArkyMapServiceReference.IMapService", CallbackContract=typeof(ArkyMapsClient.ArkyMapServiceReference.IMapServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="ArkyMapService/IMapService/Login", ReplyAction="ArkyMapService/IMapService/LoginResponse")]
        bool Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="ArkyMapService/IMapService/Login", ReplyAction="ArkyMapService/IMapService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="ArkyMapService/IMapService/Logout", ReplyAction="ArkyMapService/IMapService/LogoutResponse")]
        bool Logout(long userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="ArkyMapService/IMapService/Logout", ReplyAction="ArkyMapService/IMapService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(long userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMapServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="ArkyMapService/IMapService/NewLocation")]
        void NewLocation(long userId, long lon, long lat);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMapServiceChannel : ArkyMapsClient.ArkyMapServiceReference.IMapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MapServiceClient : System.ServiceModel.DuplexClientBase<ArkyMapsClient.ArkyMapServiceReference.IMapService>, ArkyMapsClient.ArkyMapServiceReference.IMapService {
        
        public MapServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MapServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MapServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MapServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MapServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string userName, string password) {
            return base.Channel.LoginAsync(userName, password);
        }
        
        public bool Logout(long userId) {
            return base.Channel.Logout(userId);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(long userId) {
            return base.Channel.LogoutAsync(userId);
        }
    }
}
